<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2023-06-13 21:39:51              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Services; use App\Models\Package; use Illuminate\Support\Facades\DB; use Illuminate\Http\Request; use Illuminate\Support\Arr; use Illuminate\Support\Str; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\MessageBag; class PackageInstaller { public $package; public $slug; public $namespace; public $path; public $migrations; public function __construct(Request $request, array $installable) { $this->package = array_merge($installable, $request->all()); $this->slug = $installable["\163\154\165\x67"]; $this->namespace = "\x5c\111\156\143\x65\166\x69\157\134\x50\x61\143\153\x61\147\x65\x5c" . Str::studly(Str::replace("\x2d", "\137", $this->slug)); $this->path = $installable["\160\141\x74\x68"]; $this->migrations = str_replace(base_path(), '', $this->path . "\57\x64\141\164\141\x62\x61\163\145\57\x6d\x69\147\x72\x61\x74\151\157\x6e\163"); } public function install() { Log::info("\111\x6e\163\x74\141\154\154\x69\x6e\147\x20\160\x61\143\x6b\141\x67\145\x20" . $this->slug); try { $package_data = array_merge($this->package, preparePackageInstallation($this->package)); Package::create($package_data); $this->migrate()->seed(); } catch (\Exception $exception) { Log::info("\120\x61\x63\x6b\141\147\145\x20\151\156\x73\164\141\x6c\x6c\141\164\151\157\156\x20\x66\141\x69\154\x65\144\x20" . $this->slug); Log::error(get_exception_message($exception)); throw new \Exception("\x50\x61\143\153\x61\x67\145\x20\111\156\163\x74\x61\154\154\x61\x74\151\x6f\x6e\x20\106\141\151\x6c\145\144\40" . $this->slug); } Log::info("\x53\165\143\143\145\x73\163\146\x75\154\x6c\x79\40\x69\156\x73\x74\x61\x6c\x6c\145\144\x20\x70\x61\x63\153\141\147\x65\40" . $this->slug); return true; } public function migrate() { Log::info("\115\151\147\162\141\164\x69\157\x6e\40\x73\164\x61\x72\x74\x65\x64\x20\146\157\162\40" . $this->slug); Artisan::call("\x6d\151\x67\162\141\164\x65", ["\55\55\x70\x61\x74\150" => $this->migrations, "\55\55\146\157\162\143\x65" => true]); Log::info(Artisan::output()); return $this; } private function seed() { Log::info("\x53\x65\x65\144\x69\x6e\147\40\x70\141\x63\153\x61\x67\x65\40\x64\x61\x74\141\x20\146\x6f\x72\x20" . $this->slug); foreach (glob($this->path . "\57\144\141\164\141\142\x61\163\x65\x2f\163\x65\145\x64\x73\x2f\52\56\x70\x68\x70") as $filename) { $classes = get_declared_classes(); include $filename; $temp = array_diff(get_declared_classes(), $classes); $migration = Arr::last($temp, function ($value, $key) { return $value !== "\x49\154\x6c\x75\x6d\151\156\141\164\x65\134\104\141\x74\141\142\141\x73\x65\x5c\x53\x65\145\144\x65\162"; }); Artisan::call("\x64\x62\72\x73\145\145\x64", ["\x2d\x2d\143\154\141\163\x73" => $migration, "\55\x2d\146\x6f\162\143\145" => true]); Log::info(Artisan::output()); ZmW8U: } B51bH: return $this; } public function uninstall() { Log::info("\x55\x6e\x69\x6e\x73\164\141\154\154\x69\156\x67\x20\x50\x61\143\153\141\147\145\x3a\x20" . $this->slug); $file = $this->path . "\57\x73\162\143\57\125\156\151\x6e\163\x74\141\154\x6c\x65\x72\56\x70\x68\x70"; if (!file_exists($file)) { goto Cwn1G; } include $file; Cwn1G: $class = $this->namespace . "\134\125\x6e\151\x6e\x73\x74\x61\x6c\x6c\x65\x72"; if (class_exists($class)) { goto iSFwM; } Log::info("\125\x6e\x69\156\x73\x74\141\154\154\145\162\x20\x6e\157\x74\40\146\x6f\x75\156\144\x20\151\x6e\x20\x74\x68\x65\x20\160\141\143\153\141\x67\x65\x20\x64\151\162\40\146\157\x72\40" . $this->slug); throw new \Exception("\125\156\x69\156\x73\164\141\154\x6c\145\162\x20\156\x6f\x74\x20\x66\x6f\165\x6e\144\x20\x66\157\x72\40\164\x68\x65\40\x70\141\143\153\141\147\145\40" . $this->slug); iSFwM: try { (new $class())->cleanDatabase(); $this->rollback(); } catch (\Exception $e) { Log::info("\120\141\143\x6b\141\147\x65\x20\165\156\x69\156\163\x74\x61\154\x6c\141\164\151\x6f\156\x20\x66\141\151\x6c\145\x64\x3a\40" . $this->slug); throw new \Exception("\125\156\151\156\163\164\141\x6c\x6c\x61\164\x69\x6f\156\40\x66\141\x69\154\x65\x64\72\40" . $this->slug); } Log::info("\123\x75\143\x63\x65\x73\163\x66\x75\154\x6c\x79\x20\165\x6e\151\x6e\x73\x74\141\154\154\145\x64\40\160\x61\143\153\x61\147\145\x20" . $this->slug); return $this; } private function rollback() { Log::info("\122\x6f\154\x6c\40\142\141\x63\153\40\143\141\x6c\154\x65\x64\56\56\56"); $migrations = array_reverse(glob($this->path . "\57\x64\141\164\x61\x62\x61\x73\x65\x2f\x6d\x69\147\162\141\x74\151\x6f\x6e\163\x2f\x2a\137\x2a\56\160\x68\x70")); if (!empty($migrations)) { goto G6x5C; } Log::info("\116\x6f\x20\155\151\x67\x72\141\x74\151\x6f\x6e\x20\x74\157\x20\162\x6f\154\x6c\x20\142\141\x63\153\40\x66\157\162\40\160\141\143\x6b\x61\x67\145\x20" . $this->slug); return $this; G6x5C: foreach ($migrations as $filename) { $migration = str_replace("\x2e\160\150\x70", '', basename($filename)); Log::info("\x52\x6f\x6c\154\x69\x6e\x67\x20\x62\141\x63\153\x3a\x20" . $migration); $row = DB::table("\x6d\x69\x67\x72\x61\164\x69\x6f\156\163")->where("\155\x69\x67\x72\x61\x74\151\x6f\x6e", $migration); if ($row->first()) { goto o1alT; } Log::info($migration . "\40\167\x61\163\40\156\157\164\40\x6d\151\x67\162\x61\x74\145\x64\x20\x62\x65\146\157\x72\145\x2c\x20\160\162\x6f\142\x61\x62\x6c\x79\40\151\x74\x5c\47\x73\x20\x61\40\156\145\x77\x20\x6d\151\x67\x72\141\x74\151\157\x6e\x20\x66\x69\154\x65\56"); Log::info("\123\x6b\x69\160\160\x69\156\147\x20\162\157\154\x6c\x65\144\40\x62\141\143\153\x3a\40" . $migration); goto sPXVO; o1alT: $class = Str::studly(implode("\137", array_slice(explode("\137", $migration), 4))); if (class_exists($class)) { goto X26pr; } include $filename; X26pr: (new $class())->down(); if ($row->delete()) { goto n0K_J; } Log::info("\122\x6f\154\154\142\141\x63\153\x20\106\x41\111\x4c\105\x44\72\40" . $migration); throw new \Exception("\115\x69\x67\x72\141\x74\x69\157\156\x20\162\157\154\x6c\x62\141\143\x6b\x20\x66\141\x69\x6c\145\x64\72\40" . $this->slug); goto qGo0R; n0K_J: Log::info("\x52\x6f\x6c\x6c\145\x64\40\142\141\143\x6b\x3a\x20" . $migration); qGo0R: sPXVO: } IOkwK: Log::info("\x41\154\154\40\155\x69\x67\x72\x61\x74\151\157\x6e\x73\40\150\x61\x73\40\x62\145\145\x6e\x20\162\157\154\154\x65\x64\40\142\141\x63\x6b\40\146\x6f\162\x20\160\x61\x63\153\x61\x67\x65\x20" . $this->slug); return $this; } }