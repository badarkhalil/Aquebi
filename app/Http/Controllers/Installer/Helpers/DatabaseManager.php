<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2023-06-13 21:39:27              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\x6d\x69\147\x72\141\x74\145", ["\55\x2d\x66\x6f\x72\143\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\x6f\x72", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\144\142\72\163\x65\145\x64", ["\55\x2d\x66\157\162\143\145" => true], $outputLog); Artisan::call("\x69\x6e\143\x65\x76\x69\x6f\72\x67\x65\x6e\x65\x72\141\164\x65\x2d\x6b\145\171", ["\55\55\146\157\x72\143\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\x72\x72\x6f\162", $outputLog); } return $this->response(trans("\151\x6e\163\164\141\154\154\x65\x72\137\155\x65\163\163\x61\147\x65\x73\x2e\146\151\156\141\x6c\56\x66\x69\x6e\151\x73\150\x65\144"), "\163\x75\x63\143\145\x73\x73", $outputLog); } public function seedDemoData() { ini_set("\x6d\x61\x78\x5f\x65\170\x65\x63\x75\x74\151\157\x6e\137\164\151\x6d\145", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\151\156\143\145\x76\x69\157\x3a\144\145\155\x6f"); } catch (Exception $e) { return $this->response($e->getMessage(), "\x65\x72\162\x6f\162", $outputLog); } return $this->response(trans("\151\156\x73\x74\x61\154\154\145\x72\137\155\145\163\163\141\147\145\x73\x2e\x66\151\x6e\x61\154\x2e\146\x69\156\x69\x73\x68\x65\x64"), "\x73\x75\143\x63\x65\x73\x73", $outputLog); } private function response($message, $status, $outputLog) { return ["\x73\x74\141\x74\x75\x73" => $status, "\155\145\163\x73\x61\x67\x65" => $message, "\x64\x62\x4f\165\x74\160\165\x74\114\x6f\x67" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto zMcV7; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto t8ysE; } touch($database); DB::reconnect(Config::get("\144\x61\164\141\142\141\163\x65\x2e\x64\x65\x66\141\165\154\164")); t8ysE: $outputLog->write("\x55\x73\151\x6e\147\40\123\x71\x6c\x4c\x69\164\x65\x20\x64\141\x74\x61\142\141\163\x65\x3a\40" . $database, 1); zMcV7: } }
